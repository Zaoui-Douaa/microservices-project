version: '3'
name: cosmetics-platform

services:


  mysql:
    image: mysql:8.0
    container_name: mysql
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cosmetics_db
    ports:
      - "3306:3306"
    networks:
      microservices-net:
        aliases:
          - mysql

  config-server:
    container_name: config-server
    build:
      context: ./config-server
    ports:
      - "8088:8088"
    networks:
      microservices-net:
        aliases:
          - eureka-server

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      microservices-net:
        aliases:
          - eureka-server

  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8888:8888"
    depends_on:
      - eureka-server
      - keycloak
    networks:
      microservices-net:
        aliases:
          - gateway-service

  products-service:
    build: ./products-service
    container_name: products-service
    ports:
      - "8085:8085"
    depends_on:
      - mongo
      - kafka
    volumes:
      - products-service:/data/db
    networks:
      microservices-net:
        aliases:
          - products-service

  brands-service:
    build: ./brands-service
    container_name: brands-service
    ports:
      - "8082:8082"
    environment:
      spring.datasource.url: jdbc:mysql://mysql:3306/brands_db?createDatabaseIfNotExist=true
    depends_on:
      - mysql
      - kafka
    volumes:
      - brands-service:/data/db
    networks:
      microservices-net:
        aliases:
          - brands-service

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - mongo_data:/data/db
    networks:
      microservices-net:
        aliases:
          - mongo

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    container_name: keycloak
    ports:
      - "9098:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev --import-realm
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
    networks:
      microservices-net:
        aliases:
          - keycloak

  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      microservices-net:
        aliases:
          - zookeeper

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
      - "29092:19092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      microservices-net:
        aliases:
          - kafka
          
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    environment:
      KAFKA_BROKERCONNECT: "kafka:19092"
      SERVER_PORT: 9009
    restart: on-failure
    depends_on:
      - kafka
    ports:
      - "9009:9009"
    networks:
      microservices-net:
        aliases:
          - kafdrop

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"
    networks:
      microservices-net:
        aliases:
          - prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    volumes:
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      microservices-net:
        aliases:
          - grafana

  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    ports:
      - "8081:8081"
      - "5000:5000"
    volumes:
      - nexus_data:/nexus-data
    restart: unless-stopped
    networks:
      microservices-net:
        aliases:
          - nexus
  
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"  
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true  
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    restart: unless-stopped
    networks:
      microservices-net:
        aliases:
          - sonarqube

networks:
  microservices-net:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  mongo_data:
    driver: local
  keycloak:
  nexus_data:
  products-service:
  brands-service:
  sonarqube_data:
  sonarqube_extensions:
