version: '3'
name: cosmetics-platform

services:


  mysql:
    image: mysql:8.0
    container_name: mysql
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cosmetics_db
    ports:
      - "3306:3306"
    networks:
      - microservices-net

  config-server:
    container_name: config-server
    build:
      context: ./config-server
    ports:
      - "8088:8088"
    networks:
      - microservices-net

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8888:8888"
    depends_on:
      - eureka-server
      - keycloak
    networks:
      - microservices-net

  products-service:
    build: ./products-service
    container_name: products-service
    ports:
      - "8081:8081"
    depends_on:
      - mongo
      - kafka
    networks:
      - microservices-net

  brands-service:
    build: ./brands-service
    container_name: brands-service
    ports:
      - "8082:8082"
    environment:
      spring.datasource.url: jdbc:mysql://mysql:3306/brands_db?createDatabaseIfNotExist=true
    depends_on:
      - mysql
      - kafka
    networks:
      - microservices-net

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - mongo_data:/data/db
    networks:
      - microservices-net

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    container_name: keycloak
    ports:
      - "9098:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev --import-realm
    volumes:
      - ./keycloak/realm:/opt/keycloak/data/import
    networks:
      - microservices-net

  #zookeeper:
  #  image: confluentinc/cp-zookeeper:7.6.0
  #  container_name: zookeeper
  #  hostname: zookeeper
  #  ports:
  #    - "2181:2181"
  #  environment:
  #    ZOOKEEPER_CLIENT_PORT: 2181
  #    ZOOKEEPER_SERVER_ID: 1
  #    ZOOKEEPER_SERVERS: zookeeper:2888:3888
  #  networks:
  #    - microservices-net
  #  healthcheck:
  #    test: ["CMD", "nc", "-z", "localhost", "2181"]
  #    interval: 5s
  #    timeout: 5s
  #    retries: 5
#
  #kafka:
  #  image: confluentinc/cp-kafka:7.6.0
  #  container_name: kafka
  #  hostname: kafka
  #  ports:
  #    - "9092:9092"        # external host testing
  #  #  - "29092:29092"      # alternative host testing
  #  environment:
  #    KAFKA_BROKER_ID: 1
  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #    KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #    KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #    KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #    KAFKA_JMX_PORT: 9999
  #    KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
  #    KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #    KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #    KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #  depends_on:
  #    zookeeper:
  #      condition: service_healthy
  #  networks:
  #    - microservices-net

  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - microservices-net

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - microservices-net
          
networks:
  microservices-net:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  mongo_data:
    driver: local
  keycloakdb_data: