pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://localhost:8081'
        NEXUS_REPO = 'maven-releases'
        DOCKER_HUB_CRED = credentials('docker-hub-credentials')
        IMAGE_NAME = "douaxx"
        IMAGE_TAG = "1.0.0"
    }

    stages {
        stage('Build JARs') {
            steps {
                sh 'jenkins/scripts/build_jars.sh'
            }
        }

        stage('Deploy JARs to Nexus') {
            steps {
                sh 'jenkins/scripts/deploy_jars.sh'
            }
        }
/*
        stage('Start Databases') {
            steps {
                sh 'jenkins/scripts/start_databases.sh'
            }
        }

        stage('Wait for Databases Ready') {
            steps {
                script {
                    waitForContainerHealth('keycloak', 'pg_isready -U keycloak')
                    waitForContainerHealth('products-service', "mongo --username root --password root --eval \"db.adminCommand('ping')\"")
                    waitForContainerHealth('brands-service', 'mysqladmin ping -u root -proot')
                }
            }
        }

        stage('Start keycloak and make it ready') {
            steps {
                script {
                    sh 'docker-compose up -d keycloak'
                    waitForLogReady('keycloak', 'started in')
                }
            }
        }

        stage('Start Zookeeper and make it ready') {
            steps {
                script {
                    sh 'docker-compose up -d zookeeper'
                    waitForLogReady('zookeeper', 'binding to port')
                }
            }
        }

        stage('Start kafka and make it ready') {
            steps {
                script {
                    sh 'docker-compose up -d kafka'
                    waitForLogReady('kafka', 'started')
                }
            }
        }

        stage('Start kafdrop and make it ready') {
            steps {
                script {
                    sh 'docker-compose up -d kafdrop'
                }
            }
        }

        stage('Start Prometheus and make it ready') {
            steps {
                script {
                    sh 'docker-compose up -d prometheus'
                    waitForLogReady('prometheus', 'Server is ready to receive web requests')
                }
            }
        }

        stage('Start Grafana and make it ready') {
            steps {
                script {
                    sh 'docker-compose up -d grafana'
                    waitForHttpService('http://localhost:3000/api/health')
                }
            }
        }

        stage('Build and Run Config Server') {
            steps {
                sh 'jenkins/scripts/build_run_config_server.sh'
                waitForHttpService('http://localhost:8088/actuator/health')
            }
        }

        stage('Build and Run Eureka Server') {
            steps {
                sh 'jenkins/scripts/build_run_eureka_server.sh'
                waitForHttpService('http://localhost:8761/actuator/health')
            }
        }

        stage('Start Gateway and make it ready') {
            steps {
                script {
                    sh 'jenkins/scripts/build_run_gateway.sh'
                    waitForHttpService('http://localhost:8888/actuator/health')
                }
            }
        }

        stage('Build and Run Microservices') {
            steps {
                sh 'jenkins/scripts/build_run_microservices.sh'
            }
        }
    stage('Docker Image - config-server') {
        steps {
            echo 'Création de l’image Docker pour config-server :'
            dir('config-server') {  // se placer dans le dossier config-server
                sh 'docker build -t $IMAGE_NAME/config-server:$IMAGE_TAG .'
            }
        }
    }

    stage('Docker Hub - config-server') {
        steps {
            echo 'Push de l’image config-server vers Docker Hub :'
            sh '''
                docker login -u $DOCKER_HUB_CRED_USR -p $DOCKER_HUB_CRED_PSW
                docker push $IMAGE_NAME/config-server:$IMAGE_TAG
            '''
        }
    }
*/
    }
    post {
        success {
            mail to: 'jenkinsserver15@gmail.com',
                 subject: '✅ SUCCESS - Pipeline Passed',
                 body: "The Jenkins pipeline has successfully completed. All stages passed.\n\n" +
                       "Project: tp-foyer\n" +
                       "Job: ${env.JOB_NAME}\n" +
                       "Build: ${env.BUILD_NUMBER}\n" +
                       "URL du Build: ${env.BUILD_URL}"
        }
        failure {
            mail to: 'jenkinsserver15@gmail.com',
                 subject: '❌ FAILURE - Pipeline Failed',
                 body: "The Jenkins pipeline failed. Please check the Jenkins logs for more details.\n\n" +
                       "Project: tp-foyer\n" +
                       "Job: ${env.JOB_NAME}\n" +
                       "Build: ${env.BUILD_NUMBER}\n" +
                       "URL du Build: ${env.BUILD_URL}"
        }
        unstable {
            mail to: 'jenkinsserver15@gmail.com',
                 subject: '⚠️ UNSTABLE - Coverage Below Threshold',
                 body: "The pipeline is unstable due to low code coverage or test failures.\n\n" +
                       "Project: tp-foyer\n" +
                       "Job: ${env.JOB_NAME}\n" +
                       "Build: ${env.BUILD_NUMBER}\n" +
                       "URL du Build: ${env.BUILD_URL}"
        }
    }
}

def waitForHttpService(url) {
    timeout(time: 3, unit: 'MINUTES') {
        waitUntil {
            script {
                def status = sh(
                    script: "curl -s ${url} | grep '\"status\":\"UP\"' || true",
                    returnStatus: true
                )
                if (status == 0) {
                    echo "Service at ${url} is UP"
                    return true
                } else {
                    echo "Waiting for service at ${url} to be UP..."
                    return false
                }
            }
        }
    }
}


def waitForContainerHealth(container, checkCommand) {
    timeout(time: 3, unit: 'MINUTES') {
        waitUntil {
            script {
                def status = sh(
                    script: "docker exec ${container} ${checkCommand} || true",
                    returnStatus: true
                )
                return (status == 0)
            }
        }
    }
}

def waitForLogReady(container, logKeyword) {
    timeout(time: 3, unit: 'MINUTES') {
        waitUntil {
            script {
                def found = sh(
                    script: "docker logs ${container} | grep '${logKeyword}' || true",
                    returnStatus: true
                )
                return (found == 0)
            }
        }
    }
}