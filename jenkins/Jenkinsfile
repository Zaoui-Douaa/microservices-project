pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://localhost:8081'
        NEXUS_REPO = 'maven-releases'
        DOCKER_HUB_CRED = credentials('docker-hub-credentials')
        IMAGE_NAME = "douaxx"
        IMAGE_TAG = "1.0.0"
        SONAR_SCANNER_HOME = tool 'SonarQubeScanner'
        QUALITY_GATE_PASSED = "false"
    }

    stages {
        // üî® √âtapes de Compilation et de Test
        stage('01 - Maven Build') {
            steps {
                sh 'jenkins/scripts/build_jars.sh'
            }
        }
        
        stage('02 - Unit Tests & Coverage (JUnit/Mockito)') {
            steps {
                echo 'Mockito & JUnit :'
                sh '''
                    cd products-service
                    mvn clean verify jacoco:report
                '''
            }
        }

        // üìä Analyse de qualit√© avec SonarQube
        stage('03 - Analysis SonarQube') {
            steps {
                withCredentials([string(credentialsId: 'ms-token-sonarqube', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('sonarqube') {
                        sh '''
                            cd products-service
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=microservices-project \
                                -Dsonar.sources=src/main/java \
                                -Dsonar.java.binaries=target/classes \
                                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                                -Dsonar.host.url=$SONAR_HOST_URL \
                                -Dsonar.login=$SONAR_TOKEN
                        '''
                    }
                }
            }
        }

        stage('04 - Sonar Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate abortPipeline: false
                        if (qg.status != 'OK') {
                            echo "‚ùå Quality Gate √©chou√© : ${qg.status}"
                            env.QUALITY_GATE_PASSED = "false"
                        } else {
                            echo "‚úÖ Quality Gate valid√©."
                            env.QUALITY_GATE_PASSED = "true"
                        }
                    }
                }
            }
        }

        // üì¶ Publication
        stage('05 - Publish Artifacts to Nexus') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS' || env.QUALITY_GATE_PASSED == "true"
                }
            }
            steps {
                sh 'jenkins/scripts/deploy_jars.sh'
            }
        }

        // ‚öôÔ∏è D√©marrage des bases de donn√©es
        stage('06 - Start Databases') {
            steps {
                sh 'jenkins/scripts/start_databases.sh'
            }
        }

        stage('07 - Wait for Databases to be Ready') {
            steps {
                script {
                    waitForContainerHealth('keycloak', 'pg_isready -U keycloak')
                    waitForContainerHealth('products-service', "mongo --username root --password root --eval \"db.adminCommand('ping')\"")
                    waitForContainerHealth('brands-service', 'mysqladmin ping -u root -proot')
                }
            }
        }

        // üîë Keycloak et infrastructure Kafka
        stage('08 - Start Keycloak') {
            steps {
                script {
                    sh 'docker-compose up -d keycloak'
                    waitForLogReady('keycloak', 'started in')
                }
            }
        }

        stage('09 - Start Zookeeper') {
            steps {
                script {
                    sh 'docker-compose up -d zookeeper'
                    waitForLogReady('zookeeper', 'binding to port')
                }
            }
        }

        stage('10 - Start Kafka') {
            steps {
                script {
                    sh 'docker-compose up -d kafka'
                    waitForLogReady('kafka', 'started')
                }
            }
        }

        stage('11 - Start Prometheus') {
            steps {
                script {
                    sh 'docker-compose up -d prometheus'
                    waitForLogReady('prometheus', 'Server is ready to receive web requests')
                }
            }
        }

        stage('12 - Start Grafana') {
            steps {
                script {
                    sh 'docker-compose up -d grafana'
                    waitForHttpService('http://localhost:3000/api/health')
                }
            }
        }

        stage('13 - Build and Run Config Server') {
            steps {
                sh 'jenkins/scripts/build_run_config_server.sh'
                waitForHttpService('http://localhost:8088/actuator/health')
            }
        }

        stage('14 - Build and Run Eureka Server') {
            steps {
                sh 'jenkins/scripts/build_run_eureka_server.sh'
                waitForHttpService('http://localhost:8761/actuator/health')
            }
        }

        stage('15 - Start API Gateway') {
            steps {
                script {
                    sh 'jenkins/scripts/build_run_gateway.sh'
                    waitForHttpService('http://localhost:8888/actuator/health')
                }
            }
        }

        stage('16 - Build and Run Microservices') {
            steps {
                sh 'jenkins/scripts/build_run_microservices.sh'
            }
        }

        stage('17 - Build Docker Image') {
            steps {
                echo 'Cr√©ation de l‚Äôimage Docker pour config-server :'
                dir('config-server') {  
                    sh 'docker build -t $IMAGE_NAME/config-server:$IMAGE_TAG .'
                }
            }
        }

        stage('18 - Docker Hub') {
            steps {
                echo 'Push de l‚Äôimage config-server vers Docker Hub :'
                sh '''
                    docker login -u $DOCKER_HUB_CRED_USR -p $DOCKER_HUB_CRED_PSW
                    docker push $IMAGE_NAME/config-server:$IMAGE_TAG
                '''
            }
        }

    }
    
    post {
        success {
            echo 'Pipeline completed successfully. All services are built, deployed to Nexus, and running.'
        }
        failure {
            echo 'Pipeline failed.'
            mail to: 'zaouidoa9@gmail.com',
                subject: "Jenkins Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """\
                    The Jenkins pipeline for ${env.JOB_NAME} has failed.

                    Check details and console output:
                    ${env.BUILD_URL}

                    Action is required.
                    """
        }
    }
}

def waitForHttpService(url) {
    timeout(time: 3, unit: 'MINUTES') {
        waitUntil {
            script {
                def status = sh(
                    script: "curl -s ${url} | grep '\"status\":\"UP\"' || true",
                    returnStatus: true
                )
                if (status == 0) {
                    echo "Service at ${url} is UP"
                    return true
                } else {
                    echo "Waiting for service at ${url} to be UP..."
                    return false
                }
            }
        }
    }
}


def waitForContainerHealth(container, checkCommand) {
    timeout(time: 3, unit: 'MINUTES') {
        waitUntil {
            script {
                def status = sh(
                    script: "docker exec ${container} ${checkCommand} || true",
                    returnStatus: true
                )
                return (status == 0)
            }
        }
    }
}

def waitForLogReady(container, logKeyword) {
    timeout(time: 3, unit: 'MINUTES') {
        waitUntil {
            script {
                def found = sh(
                    script: "docker logs ${container} | grep '${logKeyword}' || true",
                    returnStatus: true
                )
                return (found == 0)
            }
        }
    }
}